<html>
	<head>
		<meta http-equiv="expires" content="0">
		<meta http-equiv="pragma" content="no-cache">
		<script>
<!--
// change courseInNewWindow to false if the LMS plays the course without popping a new window.
//var courseInNewWindow=true;
var courseInNewWindow=false;

var findAPITries = 0;
var courseWindow =null;
var timerId = null;
var userId = null;
var siteId = null;
var courseId = null;
var scormSrvUrl = "http://central.mindleaders.com/lms/scorm/scormSrv.jsp";
var ReturnUrl = window.location.href.substring(0,window.location.href.indexOf("mlscorm.htm")) + "mlscorm.htm"

function getScores()
{
		var getScoresUrl = scormSrvUrl + "?action=getscores" +
		                   "&cid=" + courseId +
		                   "&siteid=" + siteId +
		                   "&userid=" + userId +
		                   "&returnurl=" + escape(ReturnUrl);
		window.onbeforeunload = null;
		window.location.replace(getScoresUrl);
}

function checkCourseWindow()
{
	if (courseWindow && courseWindow.closed)
	{
		clearInterval(timerId);
		// call scormSrvUrl and get scores
		setTimeout("getScores()", 3000);
	}
}

// remove leading and trailing white space
function trim(string)
{
  return string.replace(/^\s+/, "").replace(/\s+$/, "");
}

function findAPI(win)
{
   // Check to see if the window (win) contains the API
   // if the window (win) does not contain the API and
   // the window (win) has a parent window and the parent window
   // is not the same as the window (win)
   while ( (win.API == null) &&
           (win.parent != null) &&
           (win.parent != win) )
   {
      // increment the number of findAPITries
      findAPITries++;

      // Note: 7 is an arbitrary number, but should be more than sufficient
      if (findAPITries > 7)
      {
         alert("Error finding API -- too deeply nested.");
         return null;
      }

      // set the variable that represents the window being
      // being searched to be the parent of the current window
      // then search for the API again
      win = win.parent;
   }
   return win.API;
}

function getAPI()
{
   // start by looking for the API in the current window
   var theAPI = findAPI(window);

   // if the API is null (could not be found in the current window)
   // and the current window has an opener window
   if ( (theAPI == null) &&
        (window.opener != null) &&
        (typeof(window.opener) != "undefined") )
   {
      // try to find the API in the current window’s opener
      theAPI = findAPI(window.opener);
   }
   // if the API has not been found
   if (theAPI == null)
   {
      // Alert the user that the API Adapter could not be found
      alert("Unable to find an API adapter");
   }
   return theAPI;
}

function alertScormError(context, ignoreUnsupported)
{
  if (typeof(ignoreUnsupported) == "undefined")
    ignoreUnsupported = false;

  if (lmsAPI != null)
  {
    var errorCode = lmsAPI.LMSGetLastError();
    if (ignoreUnsupported && errorCode == "401")
      return;
    var errorString = lmsAPI.LMSGetErrorString(errorCode);
    var moreInfo = lmsAPI.LMSGetDiagnostic(errorCode);

    alert("The following SCORM error has occurred:\nContext=" + context +
      "\nError code=" + errorCode +
      "\nError Message=" + errorString +
      "\nDiagnostic=" + moreInfo);
  }
}

function getPassedParm(parm,lowerCase)
{
  if (location.search == "")
    return "";

  if (typeof(lowerCase) == "undefined")
    // Maintains compatibility with code that called this without the parameter.
    lowerCase = true;

  var parmList = "&" + location.search.substring(1,location.search.length) + "&";
  var re = new RegExp("&" + parm + "=([^&]*)&","i");
  var foundArray = re.exec(parmList);
  if (foundArray == null)
    return "";

  return lowerCase ? foundArray[1].toLowerCase() : foundArray[1];
}

// Get the LMS SCORM API.
var lmsAPI = getAPI();
var lmsResult;

if (lmsAPI != null)
{
  var action = getPassedParm("action");
  if (action == "")
    action = "init";

  if (action == "init")
  {
    var crsAcro = getPassedParm("crs_acro", false);
    if (crsAcro == "")
      alert("Invalid SCORM launchUrl.  No course identifier was provided.");

    var siteId = getPassedParm("site_id");
    if (siteId == "")
      alert("Invalid SCORM launchUrl.  No site_id was provided.");

    var access = getPassedParm("access");

    lmsResult = lmsAPI.LMSInitialize("");
    if (lmsResult == "false")
      // Couldn't initialize via the LMS.
      alertScormError("LMSInitialize()");
    else
    {
      if (lmsAPI.LMSGetValue("cmi.core.lesson_status") == "not attempted")
         lmsAPI.LMSSetValue("cmi.core.lesson_status", "incomplete");

      if (lmsAPI.LMSGetValue("cmi.core.lesson_status") == "incomplete")
         lmsAPI.LMSSetValue("cmi.core.lesson_status", "incomplete");

      // Get the userId (i.e. Student Id) from the LMS
      var userId = lmsAPI.LMSGetValue("cmi.core.student_id");
      if (lmsAPI.LMSGetLastError() != 0)
        alertScormError("LMSGetValue(\"cmi.core.student_id\")");

      // Get the user name (i.e. Student name) from the LMS
      var userName = lmsAPI.LMSGetValue("cmi.core.student_name");
      if (lmsAPI.LMSGetLastError() != 0)
        alertScormError("LMSGetValue(\"cmi.core.student_name\")");

      var nameArray = userName.split(",");
      var regStuUrl = scormSrvUrl +
        "?action=reg_ses" +
        "&cid=" + crsAcro +
        "&siteid=" + siteId +
        "&userid=" + userId +
        "&lname=" + escape(trim(nameArray[0])) +
        "&fname=" + escape(trim(nameArray[1])) +
        "&returnurl=" + escape(ReturnUrl);
      if (access != "")
      {
        regStuUrl += "&access=" + access;
      }
      window.location.replace(regStuUrl);
    }
  }
  else if (action == "launch")
  {
    var BaseUrl = getPassedParm("crs_url", false);
    userId = getPassedParm("userid", false);
    siteId = getPassedParm("siteid", false);
    courseId = getPassedParm("cid", false);
    var WebLaunch = getPassedParm("web_launch", false);
    var access = getPassedParm("access");

    // Start executing the SCO.
    var launchUrl = unescape(BaseUrl) +
      "?userid=" + userId +
      "&siteid=" + siteId +
      "&cid=" + courseId;
    if (WebLaunch != "") launchUrl += "&" + unescape(WebLaunch);
    if (access != "") launchUrl += "&access=" + access;

    // wait loop to check for when courseWindow closes
    // when this happens get scores from scormSrvUrl
    timerId = setInterval(checkCourseWindow, 1000);
	  courseWindow=window.open(launchUrl,"", "status,resizable,scrollbars");
	window.onbeforeunload = function (e) {
	var e = e || window.event;
                                
	var msg = "If you close this window, your scores will not be saved.";
	// For IE and Firefox
	if (e) {
		e.returnValue = msg;
	}
	// For Safari
	return msg;
};

  }
  else if (action == "exit")
  {
    // The SCO is exiting.
    var lessonLocation = getPassedParm("Lesson_Location");
    var lessonStatus = getPassedParm("Lesson_Status");
    var score = getPassedParm("Score");
    var sessionTime = getPassedParm("Time");

    lmsResult = lmsAPI.LMSSetValue("cmi.core.lesson_location",lessonLocation);
    if (lmsResult == "false")
      alertScormError("LMSSetValue(\"cmi.core.lesson_location\",\"" + lessonLocation + "\")");

    lmsResult = lmsAPI.LMSSetValue("cmi.core.lesson_status",lessonStatus);
    if (lmsResult == "false")
      alertScormError("LMSSetValue(\"cmi.core.lesson_status\",\"" + lessonStatus + "\")");

    lmsResult = lmsAPI.LMSSetValue("cmi.core.score.raw",score);
    if (lmsResult == "false")
      alertScormError("LMSSetValue(\"cmi.core.score.raw\",\"" + score + "\")");

    lmsResult = lmsAPI.LMSSetValue("cmi.core.score.max","100");

    lmsResult = lmsAPI.LMSSetValue("cmi.core.score.min","0");

    lmsResult = lmsAPI.LMSSetValue("cmi.core.session_time",sessionTime);
    if (lmsResult == "false")
      alertScormError("LMSSetValue(\"cmi.core.session_time\",\"" + sessionTime + "\")");

    // LMS-optional CMI data elements
    var objNum = 1;
    var objId = getPassedParm("J_ID." + objNum);
    while (objId != "")
    {
      lmsResult = lmsAPI.LMSSetValue("cmi.objectives." + (objNum-1) + ".id",objId);
      if (lmsResult == "false")
        alertScormError("LMSSetValue(\"cmi.objectives." + (objNum-1) + ".id\",\"" + objId + "\")",true);

      var objScore = getPassedParm("J_Score." + objNum);
      if (objScore != "")
      {
        lmsResult = lmsAPI.LMSSetValue("cmi.objectives." + (objNum-1) + ".score.raw",objScore);
        if (lmsResult == "false")
          alertScormError("LMSSetValue(\"cmi.objectives." + (objNum-1) + ".score.raw\",\"" + objScore + "\")",true);
      }

      var objStatus = getPassedParm("J_Status." + objNum);
      if (objStatus != "")
      {
        lmsResult = lmsAPI.LMSSetValue("cmi.objectives." + (objNum-1) + ".status",objStatus);
        if (lmsResult == "false")
          alertScormError("LMSSetValue(\"cmi.objectives." + (objNum-1) + ".status\",\"" + objStatus + "\")",true);
      }

      objNum += 1;
      var objId = getPassedParm("J_ID." + objNum);
    }

    lmsResult = lmsAPI.LMSFinish("");
    if (lmsResult == "false")
      // Couldn't finish via the LMS.
      alertScormError("LMSFinish()");

  }
  else if (action == "error")
  {
    var errorCode = getPassedParm("code");
    var errorMessage = null;

    if (errorCode == "1001")
    {
      errorMessage = "Student: '" + getPassedParm("stuid") + "' couldn't be created.";
    }
    else if (errorCode == "1002")
    {
      errorMessage = "Course: '" + getPassedParm("cid") + "' doesn't exist.";
    }
    else if (errorCode == "1003")
    {
      errorMessage = "Site: '" + getPassedParm("siteid") + "' doesn't exist.";
    }
    document.write("Mindleaders Scorm error!\n" + errorMessage);
    lmsResult = lmsAPI.LMSFinish("");
    if (lmsResult == "false")
      // Couldn't finish via the LMS.
      alertScormError("LMSFinish()");
  }
}

// *********************************** Instruction Text **************************************
var sideGif = "<img src='http://central.mindleaders.com/dpec/shared/images/skins/1/images/sidetry2.gif' height='144' width='77'>";
var welcomeGif = "<img src='http://central.mindleaders.com/dpec/shared/images/skins/1/images/welcome.gif' height='36' width='255'>";
var thankyouGif = "<img src='http://central.mindleaders.com/dpec/shared/images/skins/1/images/thankyu.gif' height='32' width='136'>";
var titleGif=welcomeGif;
//var instructions="Your course will automatically launch in a separate window.<BR>&nbsp;<BR><font color=\"red\"><b>PLEASE DO NOT CLOSE THIS WINDOW.</b></font>";
var instructions="Your course will automatically launch in a separate window. If the window does not appear, you may have popup windows blocked. If so, press the [CTRL] key while refreshing the page.<BR>&nbsp;<BR><font color=\"red\"><b>PLEASE DO NOT CLOSE THIS WINDOW.</b></font>";
if (action == "exit")
{
	titleGif=thankyouGif;
	instructions="Thank you for using our course. We hope it was a rich learning experience for you.";
	if (courseInNewWindow) instructions+="<BR>&nbsp;<BR>You may now safely close this window.";
}
// *******************************************************************************************
// -->
		</script>
		<STYLE>
table.sideBox
{
	border-width: 4px;
	border-style: double;
	padding: 10 10 10 10;
	background-color: #F0EEE9;
}
div.words
{
	color: #000000;
	font-family: verdana;
	font-size: 12pt;
	padding-bottom: 0px;
}
</STYLE>
	</head>
	<BODY background="http://central.mindleaders.com/dpec/shared/images/skins/1/images/wallpapr.jpg">
		<CENTER>
			<TABLE class="sideBox" WIDTH="545">
				<TR ALIGN="LEFT" VALIGN="TOP">
					<TD>
						<TABLE CELLSPACING="0" CELLPADDING="0">
							<TR ALIGN="LEFT" VALIGN="TOP">
								<TD>
									<SCRIPT>document.write(sideGif)</SCRIPT>
								</TD>
								<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="435"><SCRIPT>document.write(titleGif)</SCRIPT>
									&nbsp;<BR>
									<DPECW1>
										<div class="words">
											<SCRIPT language="JavaScript">document.write(instructions)</SCRIPT>
										</div>
									</DPECW1>
								</TD>
							</TR>
						</TABLE>
					</TD>
				</TR>
			</TABLE>
	</BODY>
</html>
